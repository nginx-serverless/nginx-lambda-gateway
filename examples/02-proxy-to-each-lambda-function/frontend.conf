include "lambda/lambda_ngx_http.conf";

server {
    include "lambda/lambda_ngx_apis.conf";
    listen 80;

    # Example of all endpoint to be proxied to AWS Lambda Function ARN.
    location / {
        auth_request /aws/credentials/retrieval;
        js_content lambdagateway.redirectToLambda;
    }

    # Example of a specific endpoint to be proxied to AWS Lambda Function ARN.
    location /2015-03-31/functions/foo/invocations {
        auth_request /aws/credentials/retrieval;
        js_content lambdagateway.redirectToLambda;
    }

    # Example of a specific endpoint to be proxied to AWS Lambda Function URL.
    location /bar {
        auth_request /aws/credentials/retrieval;

        # Don't allow any headers from the client
        proxy_pass_request_headers off;

        # Enable passing of the server name through TLS Server Name Indication extension.
        proxy_ssl_server_name on;
        set $lambda_func_host 'it6io4wr54p5ngkzygs4okvdmq0keqhf.lambda-url.us-east-2.on.aws';
        proxy_ssl_name $lambda_func_host;

        # Set the Authorization header to the AWS Signatures credentials
        proxy_set_header x-amz-date $awsDate;
        proxy_set_header x-amz-content-sha256 $awsPayloadHash;
        proxy_set_header Authorization $lambdaFunctionURLAuth;

        # Enable when security token is needed
        proxy_set_header X-Amz-Security-Token $awsSessionToken;

        # Use keep alive connections in order to improve performance
        proxy_http_version 1.1;
        proxy_set_header Connection '';

        # We strip off all of the AWS specific headers from the server so that
        # there is nothing identifying the object as having originated in an
        # object store.
        js_header_filter lambdagateway.editHeaders;

        proxy_pass https://$lambda_func_host/;
    }

    # Enable when debugging is needed
    error_log  /var/log/nginx/error.log  debug; # Reduce severity level as required
    access_log /var/log/nginx/access.log main;
}
